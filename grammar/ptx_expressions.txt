/* syntax for constant ptx expressions */

HEX_LITERAL ::= '__external__'
OCT_LITERAL ::= '__external__'
BIN_LITERAL ::= '__external__'
DEC_LITERAL ::= '__external__'
FLTX_LITERAL ::= '__external__'
DBLX_LITERAL ::= '__external__'
DBL_LITERAL1 ::= '__external__'
DBL_LITERAL2 ::= '__external__'
DBL_LITERAL3 ::= '__external__'

ce_int_literal ::= HEX_LITERAL | OCT_LITERAL | BIN_LITERAL | DEC_LITERAL

/* a FLTX_LITERAL cannot occur in a constant expression */
ce_flt_literal ::= FLTX_LITERAL /* | DBLX_LITERAL */

/* DBL_LITERAL? taken from C spec  */
/* decimal + exponent */
/* decimal point + number + exponent */
/* decimal + decimal point */


ce_dbl_literal ::= DBLX_LITERAL | DBL_LITERAL1 | DBL_LITERAL2 | DBL_LITERAL3
ce_literal ::= ce_int_literal | ce_dbl_literal

/* surprisingly -(.s64)1 works for ptxas, must have used the same trick? */

ce_primary ::= '(' ( '.s64' | '.u64' ) ')' constexpr | '(' constexpr ')' | ce_literal

ce_unary_1 ::= ('+' | '-' | '!' | '~')* ce_primary
ce_unary_2 ::= ce_unary_1

ce_prod ::= (ce_prod ('*' | '%' | '/'))? ce_unary_2

ce_sum ::= (ce_sum ('+' | '-'))? ce_prod

ce_shifts ::= (ce_shifts ('<<' | '>>'))? ce_sum

ce_cmp ::= (ce_cmp ('<' | '>' | '<=' | '>='))? ce_shifts

ce_eq ::= (ce_eq ('==' | '!='))? ce_cmp

ce_band ::= (ce_band '&')? ce_eq

ce_bxor ::= (ce_bxor '^')? ce_band

ce_bor ::= (ce_bor '|')? ce_bxor

ce_land ::= (ce_land '&&')? ce_bor

ce_lor ::= (ce_lor '||')? ce_land

ce_ternary ::= ce_ternary '?' ce_ternary ':' ce_ternary | ce_lor

constexpr ::= ce_ternary


/* === */
ID ::= '__external__'
label ::= ID ':'
iden ::= ID /* use to indicate identifier/variable name not just token */
predicate ::= '@' '!'? iden

reg_sel_op ::= iden sel_op /* ptx says sel are applied to register operands */
vmad_neg_op ::= '-' (iden | reg_sel_op) /* const expressions don't have -id */
addr_operand ::= '[' iden ('+' constexpr )? ']'
tex_coord ::= iden | vector_operand
tex_xps_operand ::= '[' iden ',' iden ',' tex_coord ']'
tex_imps_operand ::= '[' iden ',' tex_coord ']'
tex_coord_operand ::= tex_xps_operand | tex_imps_operand
array_index_calc ::= iden ('+' | '-') constexpr
array_index ::= '[' (ce_int_literal | iden | array_index_calc) ']'
array_operand ::= iden array_index+

/* TODO: test the nesting of these operators */
/* TODO: vector operand should accept suffixes? */
vector_operand_comp ::= iden | constexpr
vector_operand ::= '{' vector_operand_comp (',' vector_operand_comp )* '}'
vector_suffixes ::= '.x' | '.y' | '.z' | '.w' | '.r' | '.g' | '.b' | '.a'
vector_extract ::= iden vector_suffixes
paired_arg ::= args '|' args /* this is too liberal */
negated_arg ::= '!' ( iden | constexpr ) /* only predicate registers */

args ::= constexpr | iden | addr_operand | array_operand | vector_operand | vector_extract | ce_flt_literal | paired_arg | negated_arg | tex_coord_operand | reg_sel_op
arg_list ::= (args (',' args)*)?

/* ptxas accepts 32U and 64U */
address_size_dir ::= '.address_size' DEC_LITERAL

target_string ::= 'sm_70' | 'sm_72' | 'sm_75' | 'sm_60' | 'sm_61' | 'sm_62' | 'sm_50' | 'sm_52' | 'sm_53' | 'sm_30' | 'sm_32' | 'sm_35' | 'sm_37' | 'sm_20' | 'sm_10' | 'sm_11' | 'sm_12' | 'sm_13' | 'texmode_unified' | 'texmode_independent' | 'debug' | 'map_f64_to_f32'

target_list ::= ID (',' ID)*
target_dir ::= '.target' target_list address_size_dir?

/* NOTE: this rejigs ptx65_opcodes.txt */
state_spaces ::= '.reg' | '.sreg' | '.const' | '.global' | '.local' | '.param' | '.shared' | '.tex'
/* TODO: only const, global and .tex are initializable */

/* TODO: N => DEC_LITERAL only? */
ptr_dir ::= '.ptr' state_spaces '.align' DEC_LITERAL

generic_var ::= iden '(' iden ')'
addr_expr_offset ::= '+' constexpr
addr_expr ::= (generic_var | iden) addr_expr_offset?

/* TODO: array variable declarations */
array_decl ::= iden ('[' ce_int_literal? ']')+
var_parametric ::= ID '<' ce_int_literal '>'
varname ::= iden | array_decl | var_parametric

array_elem ::= scalar_init | array_init
array_elem_list ::= array_elem (',' array_elem)*
array_init ::= '{' array_elem_list '}'
scalar_init ::= constexpr | addr_expr
varinitializer ::= '=' (scalar_init | array_init)
attribute_spec ::= '.managed'
attribute_spec_list ::= attribute_spec (',' attribute_spec)*
attribute_dir ::= '.attribute' '(' attribute_spec_list ')'
align_dir ::= '.align' ce_int_literal

varinit_elt ::= varname varinitializer?
varinit_list ::= varinit_elt (',' varinit_elt)*
var_decl ::= state_spaces align_dir? ptx_vector? ptx_types varinit_list
var_decl_stmt ::= var_decl ';'

param_state_spaces ::= '.param' | '.reg'
param_decl ::= param_state_spaces align_dir? ptx_vector? ptx_types varname
param_list ::= param_decl (',' param_decl)*
param_spec ::= '(' param_list? ')'

/* valid_pragma ::= "nounroll" */
pragma ::= QUOTED_STR
pragma_list ::= pragma (',' pragma)*
pragma_dir ::= '.pragma' pragma_list
pragma_stmt ::= pragma_dir ';'

block_stmt ::= label | statement | var_decl_stmt | block | pragma_stmt | call_stmt | branchtargets_stmt | vmad_stmt | loc_dir  | calltargets_dir | callprototype_dir
block ::= '{' block_stmt* '}'

func_body ::= block?
func ::= '.func' param_spec? iden param_spec? '.noreturn'? func_body  ';'?

/* iden must be _ */
callprototype_dir ::= '.callprototype' param_spec? iden param_spec? '.noreturn'? ';'

dim_list ::= ce_int_literal ((',' ce_int_literal) (',' ce_int_literal)?)?

maxnreg_dir ::= '.maxnreg' ce_int_literal
maxntid_dir ::= '.maxntid' dim_list
reqntid_dir ::= '.reqntid' dim_list
minnctapersm_dir ::= '.minnctapersm' ce_int_literal
maxnctapersm_dir ::= '.maxnctapersm' ce_int_literal
entry_dir ::= maxnreg_dir | maxntid_dir | reqntid_dir | minnctapersm_dir | maxnctapersm_dir
entry_dir_list ::= entry_dir*

/* see the example of .entry cta_fft, but ptxas complains if two entry statements follow each other without a {} */

/* TODO: not sure where entry_dir really fits in grammar-wise */
entry ::= '.entry' iden param_spec? entry_dir_list block

linker_dir ::= '.extern' | '.visible' | '.weak' | '.common'

linker_identifier ::= entry  | func | var_decl_stmt
linker_stmt ::= linker_dir linker_identifier

/* opcode ::= 'add' '.f32' | 'ld' '.param' '.u64' | 'cvta' '.to' '.global' '.u64' | 'ret' | 'ld' '.v2' '.b8' | 'st' '.global' '.u8' | 'cvt' '.u32' '.u8' */

/* use arg_list and whittle down in semantic check if needed */
call_rp_list ::= '(' arg_list ')'
call_ret ::= (call_rp_list ',')?
call_param ::= (',' call_rp_list)?
call_fproto_flist ::= (',' iden)?
call_stmt ::= predicate? 'call' '.uni'? call_ret iden call_param call_fproto_flist ';'

vmad_op ::= vmad_neg_op | reg_sel_op | iden
vmad_stmt ::= predicate? vmad_opcode iden ',' vmad_op ',' vmad_op ',' vmad_op ';'

statement ::= predicate? opcodes arg_list ';'

toplevel_statements ::= var_decl_stmt | entry | func | linker_stmt | pragma_stmt | section_dir | file_dir | loc_dir | alias_dir

start ::= target_dir toplevel_statements*

label_list_entry ::= iden | var_parametric
label_list ::= label_list_entry (',' label_list_entry)*
branchtargets_stmt ::= '.branchtargets' label_list ';'

function_list ::= iden (',' iden)*
calltargets_dir ::= '.calltargets' function_list ';'
local_dir ::= '.local'

/* TODO: section_name token usually interferes with directives  */

dwarf_int_list ::= ce_int_literal (',' ce_int_literal)*
dwarf_label ::= section_name ('+' ce_int_literal)?
dwarf_lines ::= '.b8' dwarf_int_list | '.b16' dwarf_int_list | '.b32' dwarf_int_list | '.b64' dwarf_int_list | '.b32' dwarf_label | '.b64' dwarf_label

SECTION_NAME ::= '__external__'
section_name ::= ID /* TODO */
section_dir ::= '.section' section_name '{' dwarf_lines* '}'

QUOTED_STR ::= '__external__'
filename ::= QUOTED_STR
fileinfo ::= ',' ce_int_literal ',' ce_int_literal
file_dir ::= '.file' ce_int_literal filename fileinfo?
loc_dir ::= '.loc' ce_int_literal ce_int_literal ce_int_literal
alias_dir ::= '.alias' iden ',' iden ';'
