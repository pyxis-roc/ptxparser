#-----------------------------------------------------------------
# ptxparser: _ptx_ast.cfg
#
# Defines the AST Node classes used in ptxparser.
#
# Each entry is a Node sub-class name, listing the attributes
# and child nodes of the class:
#   <name>*     - a child node
#   <name>**    - a sequence of child nodes
#   <name>      - an attribute
#
# Based on pycparser: _c_ast.cfg
# Originally by:
# Eli Bendersky [https://eli.thegreenplace.net/]
# License: BSD
#
# ptxparser by:
# Sreepathi Pai
#-----------------------------------------------------------------

#Ptx: [version, target, address_size, statements**]

#Label: [name, stmt*]

# entry

#LinkingDirective: [directive]

#Entry: [linking, kernel_name, param_list**, performance_tuning, kernel_body**]

# could be just Param?
#EntryParam: [space, align, param_type, name, array_spec, name2, param_type2, align2, array_spec2]

#IdentifierDecl: [space, align, variable_declarator**]

Id: [name]
IntLiteral: [value, unsigned]
DblLiteral: [value]
BinOp: [op, left*, right*]
UnOp: [op, expr*]
Ternary: [cond, true*, false*]
Cast: [cast, expr*]
ConstExpr: [expr*]
Label: [name]
Predicate: [negate,reg]
Pragma: [pragma]
Statement: [predicate,opcode,args**]
Block: [body**]
ParametricVarname: [prefix, count]
# TODO
# What is the difference between attributes, child nodes, and sequence of child nodes?
# ** -> __iter__ through body
CallStmt: [predicate, opcode, ret_params, func, params, targets]
Func: [name, ret_params, params, noreturn, body*]
CallPrototype: [ret_params, params, noreturn]
Entry: [name, params, directives, body*]
Target: [targets, address_size]

Generic: [name]
AddrExpr: [var, offset]
AddressOpr: [value, offset]
VectorOpr: [elts**]
PairedArg: [args**]
NegatedArg: [arg*]
TexCoordOpr: [texref, sampler, texcoord]
SelOpr: [name, sel, negate]
Linker: [directive, identifier]
EntryDir: [name, args]
VarInit: [var, init]
Param: [ss, align, vector, type, name]
MultivarDecl: [ss, align, vector, type, varinit**]
ArrayDecl: [name, dim]
VectorComp: [var, comp]
Module: [version, target*, body**]
ArrayLiteral: [elts]
BranchTargets: [labels**]
CallTargets: [labels**]
File: [index, name, timestamp_size]
Loc: [index, line, col]
DwarfLabel: [name, offset]
DwarfLine: [dir, contents]
SectionDir: [name, dwarf_lines**]
Alias: [falias,aliasee]